VorModGA = VorModGeneticAlgorithm(GA_NUM_GENERATION_MEMBERS,    ...
    FIELD_NUM_BASE_STATIONS, Field, ...
    'beta', GA_BETA(1), ...
    'range', FITNESS_OVERRANGE_COST,    ...
    'capacity', FITNESS_OVERCAPACITY_COST,  ...
    'elite', GA_NUM_GENERATION_ELITISM, ...
    'unique', GA_UNIQUENESS,    ...
    'crossover', GA_CROSSOVER_RATE, ...
    'mutation', GA_MUTATION_RATE,   ...
    'fitcount', GA_NUM_FITNESS_HALT,    ...
    'memcount', GA_NUM_MEMBER_HALT, ...
    'generationreport', CTRL_GENERATION_REPORT, ...
    'graph', 0,  ...
    'min', GA_NUM_MINIMUM_GENERATIONS,  ...
    'max', GA_NUM_MAXIMUM_GENERATIONS);
VorModGASolution = GeneticAlgorithmSolution();
aborts = 0;
for iIterations = 1:50
    try
        fprintf('\nProcessing Beta = %1.5e, Iteration = %d',    ...
            GA_BETA(1), iIterations);
        VorModGA.setbeta(GA_BETA(1))
        VorModGA.computesolution()
        VorModGASolution.addsolution(VorModGA, [num2str(GA_BETA(1)) ...
            ',' num2str(iIterations)])
    catch
        aborts = aborts + 1;
        warning('Problem running GA; aborting iteration and continuing');
    end
end

% Generic Beta
for jBeta = 2:GA_BETA_LENGTH
    for iIterations = 1:50
        try
            fprintf('\nProcessing Beta = %1.5e, Iteration = %d',    ...
                GA_BETA(jBeta), iIterations);
            VorModGA.setbeta(GA_BETA(jBeta))
            VorModGA.computesolution()
            VorModGASolution.addsolution(VorModGA,  ...
                [num2str(GA_BETA(jBeta)) ',' num2str(iIterations)])
        catch
            aborts = aborts + 1;
            warning(    ...
                'Problem running GA; aborting iteration and continuing');
        end
    end
end